Disciplina: MIC014 – Hands-On Basic Desenvolvimento Orientado a Testes
Atividade: Maker Aula 2 
Nome dos participantes: Andreza Oliveira Gonçalves, Fábio Aurélio Barros Alexandre, Jonathan Emerson Braga da Silva

ARTEFATO 1 - REPOSITÓRIO GIT

#include <UrlEncode.h>
#include <WiFi.h>
#include <HTTPClient.h>

// Definição das credenciais do WiFi
const char* ssid = "Starlink_CIT";
const char* password = "Ufrr@2024Cit";

// Definição dos pinos do botão e LEDs
#define botao 21
#define led1 23
#define led2 2

bool flag = 1;  // Variável de controle para evitar múltiplos envios da mensagem

// Número de telefone e chave da API para CallMeBot
String phoneNumber1 = "559584140671";  // Exemplo: 5595991441665
String apiKey1 = "6312015";
String phoneNumber2 = "";  // Exemplo: 5595991441665
String apiKey2 = "1831440";

// Função para enviar a mensagem via CallMeBot API
void sendMessage(String phoneNumber, String apiKey, String message) {
    String url = "https://api.callmebot.com/whatsapp.php?phone=" + phoneNumber +
                 "&apikey=" + apiKey + "&text=" + urlEncode(message);
    HTTPClient http;
    http.begin(url);  // Inicia a conexão
    http.addHeader("Content-Type", "application/x-www-form-urlencoded");

    int httpResponseCode = http.GET();  // Pode testar com GET para verificar se melhora a latência
    if (httpResponseCode == 200) {
        Serial.println("Mensagem enviada com sucesso");
    } else {
        Serial.println("Erro no envio da mensagem");
        Serial.print("HTTP response code: ");
        Serial.println(httpResponseCode);
    }

    http.end();  // Finaliza a requisição rapidamente
}

void setup() {
  Serial.begin(115200);
  delay(1000);
  pinMode(botao, INPUT_PULLUP);
  pinMode(led1, OUTPUT);
  pinMode(led2, OUTPUT);

  digitalWrite(led1, LOW);
  digitalWrite(led2, LOW);

  WiFi.begin(ssid, password);
  Serial.println("Conectando");

  unsigned long timeout = 5000; // Reduz o tempo de espera para reconectar WiFi
  unsigned long startAttemptTime = millis();
  while (WiFi.status() != WL_CONNECTED && millis() - startAttemptTime < timeout) {
    delay(500);
    Serial.print(".");
}

  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("\nConectado ao WiFi!");
    Serial.print("IP do ESP: ");
    Serial.println(WiFi.localIP());
    digitalWrite(led2, HIGH);
  } else {
    Serial.println("\nFalha na conexão WiFi");
    digitalWrite(led2, LOW);
  }
}

void loop() {
  static unsigned long lastPress = 0;
  int estado_botao = digitalRead(botao);

  if (millis() - lastPress > 50) {  // Debounce de 50ms
    if (estado_botao == 0) {
      lastPress = millis();
      Serial.println("Botão Pressionado, enviando mensagem");
      digitalWrite(led1, HIGH);
      if (flag) {
        sendMessage(phoneNumber1, apiKey1, "SOCORRO!!!!, ME AJUDE");
        sendMessage(phoneNumber2, apiKey2, "SOCORRO!!!!, Help me");
        flag = 0;
        digitalWrite(led1, LOW);  // Apaga o LED1 após o envio
      }
    } else {
      flag = 1;
      digitalWrite(led1, LOW);
    }
  }
}
